// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_token.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT user_id
FROM refresh_tokens
WHERE token=$1
AND revoked_at IS NULL
AND expires_at > NOW()
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const refreshToken = `-- name: RefreshToken :one
INSERT INTO refresh_tokens (
    token,
    created_at,
    updated_at,
    user_id,
    expires_at,
    revoked_at
    )
VALUES (
    $1,  
    NOW(),              
    NOW(),              
    $2,
    $3,
    $4  
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type RefreshTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt sql.NullTime
	RevokedAt sql.NullTime
}

func (q *Queries) RefreshToken(ctx context.Context, arg RefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, refreshToken,
		arg.Token,
		arg.UserID,
		arg.ExpiresAt,
		arg.RevokedAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :one
UPDATE refresh_tokens
SET
  updated_at = NOW(),
  revoked_at = NOW()
WHERE token = $1
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

func (q *Queries) UpdateRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, updateRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

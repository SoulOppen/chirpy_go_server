// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email,hashed_password)
VALUES (
    gen_random_uuid(),  
    NOW(),              
    NOW(),              
    $1,
    $2  
)
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const returnHashPassword = `-- name: ReturnHashPassword :one
SELECT hashed_password 
FROM users 
WHERE email=$1
`

func (q *Queries) ReturnHashPassword(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRowContext(ctx, returnHashPassword, email)
	var hashed_password string
	err := row.Scan(&hashed_password)
	return hashed_password, err
}

const returnUserNotPassword = `-- name: ReturnUserNotPassword :one
SELECT id,created_at, updated_at, email,is_chirpy_red
FROM users 
WHERE email=$1
`

type ReturnUserNotPasswordRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Email       string
	IsChirpyRed sql.NullBool
}

func (q *Queries) ReturnUserNotPassword(ctx context.Context, email string) (ReturnUserNotPasswordRow, error) {
	row := q.db.QueryRowContext(ctx, returnUserNotPassword, email)
	var i ReturnUserNotPasswordRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET
    updated_at = NOW(),
    email=$1,
    hashed_password=$2
WHERE id = $3
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type UpdateUserParams struct {
	Email          string
	HashedPassword string
	ID             uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Email, arg.HashedPassword, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateUserIsRed = `-- name: UpdateUserIsRed :one
UPDATE users 
SET
    updated_at = NOW(),
    is_chirpy_red=true
WHERE id = $1
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

func (q *Queries) UpdateUserIsRed(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserIsRed, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}
